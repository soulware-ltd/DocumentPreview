<?php

$start = microtime(true);

//dummy class for testing
/*
class EditView{

	function display(){

		//valami

	}

}*/

function view_merge(){

	//write debug info to console
	$console_messages = false;

	require_once(__DIR__ . '/view_merge.config.php');

	if(isset($merge_config) && is_array($merge_config)){

		if($console_messages) echo "metadata info found.\n--------------------------\n";

		//iterate over user defined views to extend
		foreach($merge_config as $file_info){

			$paths = getPaths($file_info['module'], $file_info['type'], $file_info['sourcefile']);

			if($console_messages) echo "custom path: " . $paths['custom_path'] . "\npath: " . $paths['path'] . "\n";

			//if view file exists in custom folder
			if(isset($paths['custom_path']) && !empty($paths['custom_path']) && is_file($paths['custom_path'])){

				if($console_messages) echo "opening " . $paths['custom_path'] . " \n";

				$file_content = getFile($paths['custom_path']);

				if($class_name = getClassName($file_content)){

					if($console_messages) echo "init class $class_name\n";

					$object = new $class_name();

					if(method_exists($object, $file_info['method_name'])){

						if($console_messages) echo $class_name . "::" . $file_info['method_name'] . " exists, extend method with custom code\n";

						$new_content = extendMethod($file_content, $file_info['method_name'], $file_info['content'], $file_info['insert_method']);

					}
					else{

						if($console_messages) echo $class_name . "::" . $file_info['method_name'] . " DOES NOT exists, extend class with method\n";

						$new_content = extendClass($file_content, $class_name, $file_info['method_name'], $file_info['content'], $file_info['insert_method']);

					}

					if($console_messages) echo "save file to " . $paths['custom_path'] . "\n";

					saveFile($paths['custom_path'], $new_content, true);

				}
				else{

					if($console_messages) echo $paths['custom_path'] . " has no class.\n";

				}
	
				if($console_messages) echo "bye :)\n";
			}
			//if view file exists in modules folder
			elseif(isset($paths['path']) && !empty($paths['path']) && is_file($paths['path'])){

				if($console_messages) echo "opening " . $paths['path'] . " \n";

				$file_content = getFile($paths['path']);

				if($class_name = getClassName($file_content)){

					if($console_messages) echo "init class $class_name\n";

					$object = new $class_name();

					$extend = (method_exists($object, $file_info['method_name']));

					if($console_messages) echo "create new class with name " . $class_name . " and method " . $file_info['method_name'] . "\n";

					$new_content = createClass($class_name, $file_info['method_name'], $file_info['content'], $file_info['insert_method'], $paths['path'], $extend);

					if($console_messages) echo "save file to " . $paths['custom_path'] . "\n";

					saveFile($paths['custom_path'], $new_content, true);

				}
				else{

					if($console_messages) echo $paths['custom_path'] . " has no class.\n";

				}

				if($console_messages) echo "bye :)\n";

			}
			//view file doesn't exist, extend the given base class
			else{

				if($console_messages) echo "creating class from scratch, extending the base class " . $file_info['base_class'] . "\n";

				//extend the base viewclass
				$object = new $file_info['base_class']();
				$extend = (method_exists($object, $file_info['method_name']));

				if($console_messages) echo "create class\n";

				$new_content = createClass($file_info['base_class'], $file_info['method_name'], $file_info['content'], $file_info['insert_method'], null, $extend);

				if($console_messages) echo "save file to " . $paths['custom_path'] . "\n";

				saveFile($paths['custom_path'], $new_content, true);

				if($console_messages) echo "bye :)\n";

			}

		}

	}
	else{

		if($console_messages) echo "no merge config data found.\n";

	}

	$time_taken = microtime(true) - $start;

	if($console_messages) echo "execution time: " . $time_taken . "\n";

}

//HELPERS

function getPaths($module, $type, $filename){

	$path = 'modules/' . $module . '/' . $type . '/' . $filename;
	$custom_path = 'custom/' . $path;

	$return_array = array();

	$return_array['path'] = $path;
	$return_array['custom_path'] = $custom_path;

	return $return_array;

}


////////////// replace test
/*
$files = array('teszt1.php', 'teszt2.php', 'teszt3.php', 'teszt4.php');

foreach($files as $file){

	$content = getFile($file);

	//echo "$file content: " . $content . "\n";

	//$new_content = removeSugarEntry($content);

	//echo "$file new content: " . $new_content . "\n";

	if($className = getClassName($content)){
	
		echo $className . "\n";

	}
	else{

		echo "no class \n";

	}

}*/

function getFile($path){

	if($file_permission_error = filePermissionError($path)) die($file_permission_error);

	$content = file_get_contents($path);
	
	if($new_content = removeSugarEntry($content)){

		file_put_contents($path, $new_content);

	}

	//works only if run inside of sugar, need some workaround
	//one possible way is to check for extend part and create a dummy class on the fly
	require_once($path);

	return ($new_content) ? $new_content : $content;

}


function removeSugarEntry($content){

	$pattern = "sugarEntry";

	$full_pattern = "if(!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');";

	$regexp_pattern = '/if\s*\(\s*\!\s*defined\s*\(\s*(\'|\")\s*sugarEntry\s*(\'|\")\s*\)\s*\|\|\s*\!sugarEntry\s*\)\s*die\s*\(.*\)\s*;/';

	if(strpos($content, $pattern)){

		return preg_replace($regexp_pattern, '', $content);

	}
	else{

		return false;

	}

}

//TODO
function filePermissionError($path){

	return false;

}

function getClassName($content){

	$pattern = '/class\s*[A-Za-z0-9_]+\s*(extends\s+[A-Za-z0-9_]+\s*)?\{/';

	$return_array = array();

	if(preg_match($pattern, $content, &$return_array)){

		$className = $return_array[0];
		$className = str_replace('class', '', $className);
		$className = str_replace('extends', '', $className);
		$className = str_replace('{', '', $className);
 		$className = trim($className);
		$className = str_replace('	', ' ', $className);
		$classNameArray = explode(' ', $className);

		$returnClassName = $classNameArray[0];

		return $returnClassName;

	}
	else{

		return false;

	}

}

//test string
/*$file_content = '<?php

class ClassName {
public static function MethodName ($valamit, $param2){

	if(true){
		echo "dafakk";
	}
	else{
		echo "fakk";

		if(false){
			echo "xx";
		}
	}
valami;

} 

}
?>
';*/

//test cases
//echo $return_data = extendMethod($file_content, 'MethodName', 'content to insert', 'append');
//echo $return_data = extendClass($file_content, 'ClassName', 'MethodName', 'content to insert');

function extendMethod($file_content, $method_name, $content_to_insert, $insert_method){

	if($insert_method == 'append'){

		$pattern = "/function\s+$method_name\s*\([^\)]*\)\s*\{/";

		return append($pattern, $content_to_insert, $file_content);

	}
	else{

		$pattern = "/function\s+$method_name\s*\([^\)]*\)\s*\{/";

		return prepend($pattern, $content_to_insert, $file_content);

	}

}

function extendClass($file_content, $class_name, $method_name, $content_to_insert){

	$pattern = "/class\s+$class_name\s*\{/";

	$content_to_insert = "\n\nfunction $method_name(){\n\n" . $content_to_insert . "\n}\n";
	
	return prepend($pattern, $content_to_insert, $file_content);


}

function prepend($pattern, $content_to_insert, $content){

	$return_array = array();

	if(preg_match($pattern, $content, &$return_array)){

		$content_to_add = $return_array[0] . "\n\n" . $content_to_insert . "\n";

		$new_content = str_replace($return_array[0], $content_to_add, $content);

		return $new_content;

	}
	else{

		return false;

	}

}

function append($pattern, $content_to_insert, $content){

	$return_array = array();

	if(preg_match($pattern, $content, &$return_array, PREG_OFFSET_CAPTURE)){

		$content_length = strlen($content);
		$pattern_length = strlen($return_array[0][0]);
		$pattern = $return_array[0][0];
		$pattern_start_position = $return_array[0][1];

		$content_array = explode($pattern, $content);	

		$first_part = $content_array[0];
		$second_part = $content_array[1];

		$relative_position_closing_bracket = closingBracketPosition($second_part);

		$second_part_first_part = substr($second_part, 0, $relative_position_closing_bracket-1);

		$second_part_second_part = substr($second_part, $relative_position_closing_bracket-1);

		$return_string = $first_part . $pattern . $second_part_first_part . "\n" . $content_to_insert . "\n" . $second_part_second_part;

		return $return_string;

	}
	else{

		if($console_messages) echo "no pattern match.\n";

	}

}

function closingBracketPosition($string){

	$open = 0;
	$close = 0;

	$balance = 0;

	$char_num = 0;

	$closing_position = false;

	$chunks = str_split($string);

	foreach($chunks as $char){

		if($char == "{") $balance++;
		if($char == "}") $balance--;
		$char_num++;

		//echo "char: '" . $balance ."', position: " . $char_num . "\n";

		if($balance == -1 && $closing_position == false) $closing_position = $char_num;

	}

	return $closing_position;

}

function saveFile($path, $content, $add_sugar_entry = true){

	if($add_sugar_entry){

		$sugar_entry = "<?php \n\nif(!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');\n";

		$content = str_replace('<?php', $sugar_entry, $content);

	}

	file_put_contents($path, $content);

}

function createClass($class_name, $method_name, $content_to_insert, $insert_method, $base_class_path, $extend){

	$content = "<?php\n";
	if($base_class_path != null) $content .= "require_once('" . $base_class_path . "');\n";
	$content .= "class Custom$class_name extends $class_name{\n\n";
	$content .= "public function $method_name(){\n\n";
	if($extend && $insert_method == 'append') $content .= "parent::$method_name();\n";
	$content .= $content_to_insert . "\n";
	if($extend && $insert_method == 'prepend') $content .= "parent::$method_name();\n";
	$content .= "}\n}\n?>";

	return $content;

}

?>
